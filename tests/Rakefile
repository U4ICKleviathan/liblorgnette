task :default => [:cleanup]

# Configuration
SOURCES = "tests.c ../lorgnette.c"
SHARED_CCFLAGS = "-std=c99"
NEEDS_SUDO = true

specs = [
	{ :compiler => "clang", :arch => "i386",   :ccflags => "-O0", :result => true },
	{ :compiler => "clang", :arch => "i386",   :ccflags => "-O3", :result => true },
	{ :compiler => "clang", :arch => "x86_64", :ccflags => "-O0", :result => true },
	{ :compiler => "clang", :arch => "x86_64", :ccflags => "-O3", :result => true },

	{ :compiler => "gcc", :arch => "i386",   :ccflags => "-O0", :result => true },
	{ :compiler => "gcc", :arch => "i386",   :ccflags => "-O3", :result => true },
	{ :compiler => "gcc", :arch => "x86_64", :ccflags => "-O0", :result => true },
	{ :compiler => "gcc", :arch => "x86_64", :ccflags => "-O3", :result => true },
]

desc "Build test cases using clang and gcc compilers for i386 and x86_64 architectures"
task :build do
	system("mkdir build") if (!File.exists?(Dir.getwd + "/build"))
	specs.each {|entry|
		outfile = "#{entry[:compiler]}_#{entry[:arch]}_#{entry[:ccflags].delete(' ')}"
		system("#{entry[:compiler]} -arch #{entry[:arch]} #{SHARED_CCFLAGS} #{entry[:ccflags]} -o ./build/#{outfile} #{SOURCES}")
		if $?.exitstatus != 0 then
			entry[:result] = false;
			puts "Fail to compile tests (#{outfile})".red
		end
	}
end

desc "Run test cases"
task :execute => [:build] do
	specs.each {|entry|
		if entry[:result] != false then
			executable = "#{entry[:compiler]}_#{entry[:arch]}_#{entry[:ccflags].delete(' ')}"
			sudo_prefix = "sudo " if NEEDS_SUDO
			system("#{sudo_prefix}./build/#{executable}")
			entry[:result] = false if $?.exitstatus != 0

			status = entry[:result] == true ? "OK".green : "FAIL".red
			printf "%s %s\n",
				"#{entry[:compiler]}/#{entry[:arch]}/#{entry[:ccflags].sub(' ', ',')}".brown,
				status
		end
	}
end

desc "Clean up stuff"
task :cleanup => [:execute] do
	system("rm -Rf ./build")
	if specs.index {|entry| entry[:result] == false} != nil then
		exit (-1)
	else
		exit (0)
	end
end

# Colors, Rainbows, Unicorns!
class String
	def red;   "\033[1;31m#{self}\033[0m" end
	def green; "\033[1;32m#{self}\033[0m" end
	def brown; "\033[0;33m#{self}\033[0m" end
end
